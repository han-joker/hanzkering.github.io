<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小韩说课</title>
  
  <subtitle>PHP，Python，JavaScript，Go，MySQL...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hellokang.net/"/>
  <updated>2018-11-17T13:22:10.985Z</updated>
  <id>http://blog.hellokang.net/</id>
  
  <author>
    <name>韩忠康</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go实现Markdown博客分析设计</title>
    <link href="http://blog.hellokang.net/go/go-blog-analysis/"/>
    <id>http://blog.hellokang.net/go/go-blog-analysis/</id>
    <published>2018-11-17T13:14:17.000Z</published>
    <updated>2018-11-17T13:22:10.985Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;&lt;span id=&quot;1-功能需求&quot;&gt;1 功能需求&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;一个基于 markdown 格式的文档博客系统。提供的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;markdown
        
      
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
      <category term="markdown" scheme="http://blog.hellokang.net/tags/markdown/"/>
    
      <category term="yaml" scheme="http://blog.hellokang.net/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>Go语言解析YAML</title>
    <link href="http://blog.hellokang.net/go/go-yaml/"/>
    <id>http://blog.hellokang.net/go/go-yaml/</id>
    <published>2018-11-16T15:17:09.000Z</published>
    <updated>2018-11-17T12:53:17.161Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-安装-go-yamlyaml&quot;&gt;2 安装 &lt;code&gt;go-yaml/yaml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-解析-yaml&quot;&gt;3 解析 YAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-构建-yaml&quot;&gt;4 构建 YAML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;YAML是”YAML Ain’t a Markup Language”（YAML不是一种置标语言）的递归缩写。YAML 以数据为中心，使用空白，缩进，分行组织数据，从而使得表示更加简洁易读。一个典型的 YAML 如下：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;小韩说课&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;category:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;tag:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;OOP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;GoLang&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本语法为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用缩进表示层级关系&lt;/li&gt;
&lt;li&gt;禁止使用tab缩进，只能使用空格键&lt;/li&gt;
&lt;li&gt;缩进长度没有限制，只要元素对齐就表示这些元素属于一个层级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在项目中，配置文件选择 YAML 是常见的选择。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yaml.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Official YAML Web Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.hellokang.net/yaml/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;语法参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文介绍在 Go 语言中解析 YAML。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言解析markdown</title>
    <link href="http://blog.hellokang.net/go/go-markdown/"/>
    <id>http://blog.hellokang.net/go/go-markdown/</id>
    <published>2018-11-15T14:41:34.000Z</published>
    <updated>2018-11-15T15:08:07.448Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-安装-blackfriday&quot;&gt;2 安装 Blackfriday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-解析-markdown-内容&quot;&gt;3 解析 MarkDown 内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-安全过滤&quot;&gt;4 安全过滤&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#安装&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#使用&quot;&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级的标记语言。设计的目的是通过简单、轻量级的方式来添加格式，而不需要使用 HTML。&lt;/p&gt;
&lt;p&gt;相关文档如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hellokang.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown语法文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown语法文档（官方）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alfred-sun.github.io/markdown-syntax-zhtw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown语法文档（翻译）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中操作MySQL</title>
    <link href="http://blog.hellokang.net/go/go-mysql/"/>
    <id>http://blog.hellokang.net/go/go-mysql/</id>
    <published>2018-11-14T14:41:40.000Z</published>
    <updated>2018-11-14T14:44:06.550Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-mysql-驱动安装&quot;&gt;2 MySQL 驱动安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-打开数据库&quot;&gt;2 打开数据库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-数据源名称&quot;&gt;3 数据源名称&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-查询操作&quot;&gt;4 查询操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#查询多行&quot;&gt;查询多行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#查询单行&quot;&gt;查询单行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#null处理&quot;&gt;NULL处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-非查询操作&quot;&gt;5 非查询操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-预编译&quot;&gt;6 预编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-事务&quot;&gt;7 事务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;Go 语言程序可以作为 MySQL 服务器的客户端完成 MySQL 数据库的操作。&lt;/p&gt;
&lt;p&gt;Go 语言中，使用 &lt;code&gt;database/sql&lt;/code&gt; 包实现类 SQL 数据库的操作。&lt;code&gt;sql&lt;/code&gt; 包是一个数据库抽象层，具体的数据库操作的实现要依赖于相应的驱动才可以。抽象层与驱动的关系，如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://asset.hellokang.net/images/mysql/mysql-abstract-layer.png&quot; alt=&quot;数据库抽象层&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go 支持的驱动列表请参考：&lt;a href=&quot;https://github.com/golang/go/wiki/SQLDrivers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/golang/go/wiki/SQLDrivers&lt;/a&gt;，或者 &lt;a href=&quot;http://go.hellokang.net/sql-drivers.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQL驱动列表&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使模板引擎的语法</title>
    <link href="http://blog.hellokang.net/go/go-http-template-syntax/"/>
    <id>http://blog.hellokang.net/go/go-http-template-syntax/</id>
    <published>2018-11-13T14:32:46.000Z</published>
    <updated>2018-11-14T02:01:08.039Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-模板界定符&quot;&gt;1 模板界定符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-数据&quot;&gt;2 数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-调用函数&quot;&gt;3 调用函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-管道&quot;&gt;4 管道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-条件分支&quot;&gt;5 条件分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-循环遍历&quot;&gt;6 循环遍历&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-解析子模板&quot;&gt;7 解析子模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8-定义模板变量&quot;&gt;8 定义模板变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#9-注释&quot;&gt;9 注释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-模板界定符&quot;&gt;&lt;a href=&quot;#1-模板界定符&quot; class=&quot;headerlink&quot; title=&quot;1 模板界定符&quot;&gt;&lt;/a&gt;1 模板界定符&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是默认的模板界定符。用于在 HTML 模板文件中界定模板语法。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello, &amp;#123;&amp;#123; .User &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你熟悉的技术：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; range .List &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;.&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123;end&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若需要使用自定义的界定符，使用 &lt;code&gt;func (t *Template) Delims(left, right string) *Template&lt;/code&gt; 方法进行定义。后续的解析会识别新定义的界定符。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使用模板引擎</title>
    <link href="http://blog.hellokang.net/go/go-http-template/"/>
    <id>http://blog.hellokang.net/go/go-http-template/</id>
    <published>2018-11-13T14:32:37.000Z</published>
    <updated>2018-11-14T01:58:58.173Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-解析模板&quot;&gt;2 解析模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-应用数据并发送响应&quot;&gt;3 应用数据并发送响应&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;处理响应主体时，最常见的方式就是发送处理好的 HTML 代码，由于需要将数据嵌入到 HTML 中，那么模板引擎（template engine）就是最好的选择。&lt;/p&gt;
&lt;p&gt;Go语言中，提供了 &lt;code&gt;html/template&lt;/code&gt; 包，实现模板引擎的相关功能。快速使用示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;main.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;html/template&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 设置 处理函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, TestAction)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//// 开启监听（监听浏览器请求）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log.Fatal(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8084&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestAction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 解析模板&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t, _ := template.ParseFiles(&lt;span class=&quot;string&quot;&gt;&quot;template/index.html&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 设置模板数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;User&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;小韩说课&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;List&quot;&lt;/span&gt;: []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Go&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Python&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;PHP&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 渲染模板，发送响应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t.Execute(w, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;template/index.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;小韩说课&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, &amp;#123;&amp;#123; .User &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你熟悉的技术：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; range .List &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;.&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123;end&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://asset.hellokang.net/images/go/go-http-template-1.png&quot; alt=&quot;执行结果&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上代码就完了模板引擎的基本使用，包括解析模板，渲染数据，响应结果操作。接下来详细说明。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go中处理响应</title>
    <link href="http://blog.hellokang.net/go/go-http-response/"/>
    <id>http://blog.hellokang.net/go/go-http-response/</id>
    <published>2018-11-12T13:44:54.000Z</published>
    <updated>2018-11-12T13:50:57.601Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-响应主体&quot;&gt;2 响应主体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-响应头信息&quot;&gt;3 响应头信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-操作cookie&quot;&gt;4 操作cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-重定向&quot;&gt;5 重定向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-响应-404&quot;&gt;6 响应 404&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;Go 语言 HTTP 服务器，在启动监听并处理接收的请求时，会将实现了 &lt;code&gt;http.ResponseWriter&lt;/code&gt; 接口的 &lt;code&gt;http.Response&lt;/code&gt; 对象作为第一个参数传递到请求处理器，示例代码：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 设置 路由&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, IndexAction)·&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 开启监听&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log.Fatal(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IndexAction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  w.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`&amp;lt;h1 align=&quot;center&quot;&amp;gt;来自小韩说课的问候&amp;lt;/h1&amp;gt;`&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例代码中的参数 &lt;code&gt;w&lt;/code&gt; 就是这个响应对象。我们通过该对象完成响应的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>json-bson</title>
    <link href="http://blog.hellokang.net/uncategorized/json-bson/"/>
    <id>http://blog.hellokang.net/uncategorized/json-bson/</id>
    <published>2018-11-12T11:27:44.000Z</published>
    <updated>2018-11-12T11:27:44.714Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go中处理请求</title>
    <link href="http://blog.hellokang.net/go/go-http-request/"/>
    <id>http://blog.hellokang.net/go/go-http-request/</id>
    <published>2018-11-11T08:54:19.000Z</published>
    <updated>2018-11-12T14:59:25.728Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-httprequest-结构&quot;&gt;2 &lt;code&gt;http.Request&lt;/code&gt; 结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-请求方式&quot;&gt;3 请求方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-请求参数&quot;&gt;4 请求参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-请求头&quot;&gt;5 请求头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-获取-cookie&quot;&gt;6 获取 cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-请求-url&quot;&gt;7 请求 URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;Go 语言 HTTP 服务器，在启动监听并处理接收的请求时，会将请求相关数据封装成 &lt;code&gt;http.Request&lt;/code&gt; 对象，同时作为参数传递到请求处理器中。处理器函数的第二个参数就是对 &lt;code&gt;http.Request&lt;/code&gt; 对象的一个引用,示例代码为：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 设置 路由&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, IndexAction)·&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 开启监听&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log.Fatal(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IndexAction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  w.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`&amp;lt;h1 align=&quot;center&quot;&amp;gt;来自小韩说课的问候&amp;lt;/h1&amp;gt;`&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中处理 HTTP 服务器</title>
    <link href="http://blog.hellokang.net/go/go-http-server/"/>
    <id>http://blog.hellokang.net/go/go-http-server/</id>
    <published>2018-11-09T13:30:16.000Z</published>
    <updated>2018-11-11T04:06:12.708Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;包 &lt;code&gt;net/http&lt;/code&gt; 提供了HTTP服务器端和客户端的实现。本文说明关于服务器端的部分。&lt;/p&gt;
&lt;p&gt;快速开始：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 设置 路由&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, IndexAction)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 开启监听&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log.Fatal(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IndexAction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  w.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`&amp;lt;h1 align=&quot;center&quot;&amp;gt;来自小韩说课的问候&amp;lt;/h1&amp;gt;`&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行程序，在浏览器上请求： &lt;code&gt;localhost:8888&lt;/code&gt;，你会看到我们的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://asset.hellokang.net/images/go/server-welcome.png&quot; alt=&quot;第一个服务器程序&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go语言构建HTTP服务器还是很容易的。深入说明。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言支持的正则语法</title>
    <link href="http://blog.hellokang.net/go/go-regexp-syntax/"/>
    <id>http://blog.hellokang.net/go/go-regexp-syntax/</id>
    <published>2018-11-07T15:53:09.000Z</published>
    <updated>2018-11-12T14:15:30.381Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-字符&quot;&gt;&lt;a href=&quot;#1-字符&quot; class=&quot;headerlink&quot; title=&quot;1 字符&quot;&gt;&lt;/a&gt;1 字符&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;语法&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;任意字符，在单行模式（s标志）下，也可以匹配换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[xyz]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[^xyz]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;否定字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Perl 字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;否定 Perl 字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[[:alpha:]]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ASCII 字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[[:^alpha:]]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;否定 ASCII 字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\pN&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Unicode 字符类 (one-letter name)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\p{Greek}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Unicode 字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\PN&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;否定 Unicode 字符类 (one-letter name)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\P{Greek}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;否定 Unicode 字符类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参考以下附录，获取具体字符类的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://go.hellokang.net/regexp-perl.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Perl 字符类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://go.hellokang.net/regexp-ascii.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ASCII 字符类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://go.hellokang.net/regexp-unicode-one-letter.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unicode 字符类 (one-letter name)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://go.hellokang.net/regexp-unicode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unicode 字符类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中正则表达式的处理</title>
    <link href="http://blog.hellokang.net/go/go-regexp/"/>
    <id>http://blog.hellokang.net/go/go-regexp/</id>
    <published>2018-11-07T15:26:56.000Z</published>
    <updated>2018-11-07T16:07:00.614Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;正则表达式，又称规则表达式，Regular Expression，在代码中常简写为 regex、regexp 或 RE。正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。&lt;br&gt;Perl 语言的正则表达式功能非常强大，很多语言设计正则式支持的时候都参考Perl的正则表达式。因此常用的表达式语法也是 Perl 兼容正则表达式。&lt;/p&gt;
&lt;p&gt;Go 语言中使用包 &lt;code&gt;regexp&lt;/code&gt; 提供对正则表达式的支持。本文说明 &lt;code&gt;regexp&lt;/code&gt; 中常用的正则处理方法。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中的模板引擎</title>
    <link href="http://blog.hellokang.net/go/go-template/"/>
    <id>http://blog.hellokang.net/go/go-template/</id>
    <published>2018-11-07T14:50:38.000Z</published>
    <updated>2018-11-07T01:52:07.453Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;&lt;span id=&quot;1-概述&quot;&gt;1 概述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;模板引擎，便于处理HTML与数据间的整合。使用包 &lt;code&gt;html/template&lt;/code&gt; 实现。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;2-基本使用&quot;&gt;2
        
      
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言反射之反射调用</title>
    <link href="http://blog.hellokang.net/go/go-reflect-invoke/"/>
    <id>http://blog.hellokang.net/go/go-reflect-invoke/</id>
    <published>2018-11-04T17:34:28.000Z</published>
    <updated>2018-11-04T17:36:12.734Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-创建实例&quot;&gt;2 创建实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-调用函数&quot;&gt;3 调用函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-调用方法&quot;&gt;4 调用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;利用反射，不仅可以获取信息，还可以创建实例，执行函数和方法。就是反射代理执行。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言反射之值反射</title>
    <link href="http://blog.hellokang.net/go/go-reflect-value/"/>
    <id>http://blog.hellokang.net/go/go-reflect-value/</id>
    <published>2018-11-04T16:51:45.000Z</published>
    <updated>2018-11-04T16:56:39.069Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-值反射对象&quot;&gt;2 值反射对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-修改值&quot;&gt;3 修改值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-修改结构体字段值&quot;&gt;4 修改结构体字段值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;反射不仅可以获取值的类型信息，还可操作变量的值。使用 &lt;code&gt;reflect.Value&lt;/code&gt; 类型操作变量的值。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言反射之类型反射</title>
    <link href="http://blog.hellokang.net/go/go-reflect-structure/"/>
    <id>http://blog.hellokang.net/go/go-reflect-structure/</id>
    <published>2018-11-03T04:05:48.000Z</published>
    <updated>2018-11-12T15:02:34.621Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-获取类型&quot;&gt;2 获取类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-获取基础类型类别&quot;&gt;3 获取基础类型（类别）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-指针引用的元素类型&quot;&gt;4 指针引用的元素类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-结构体信息&quot;&gt;5 结构体信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-结构体标签&quot;&gt;6 结构体标签&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;类似于 Java，Go 语言也支持反射。支持反射的语言可以在运行时对程序进行访问和修改。反射的原理是在程序编译期将反射信息（如类型信息、结构体信息等）整合到程序中，并给提供给程序访问反射信息的操作接口，这样在程序运行期间就可以获取该反射信息，甚至支持修改操作。&lt;/p&gt;
&lt;p&gt;Go 语言使用 &lt;code&gt;reflect&lt;/code&gt; 包支持反射。&lt;/p&gt;
&lt;p&gt;本文介绍与类型结构相关的反射操作。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中接口的使用</title>
    <link href="http://blog.hellokang.net/go/go-interface/"/>
    <id>http://blog.hellokang.net/go/go-interface/</id>
    <published>2018-11-02T13:46:10.000Z</published>
    <updated>2018-11-13T14:34:11.527Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-定义语法&quot;&gt;2 定义语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-对象实现接口&quot;&gt;3 对象实现接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-判断对象是否实现接口&quot;&gt;4 判断对象是否实现接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-通过接口调用对象方法&quot;&gt;5 通过接口调用对象方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-空接口&quot;&gt;6 空接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-接口间的嵌套&quot;&gt;7 接口间的嵌套&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;接口，interface，是用于规范对象应该具备哪些方法的技术。OOP中与结构体配合使用，对象使用结构体规范应该具有的书写，而对外通过接口暴露方法。Go 语言的接口设计是非侵入式的，接口实现者（也就是结构体）无须指明实现哪一个接口。编译器在编译时来确定使用哪个接口。&lt;br&gt;在 Go 语言中，接口是一种引用的数据类型出现的。但体现的功能是规范，而不是数据。&lt;br&gt;做 OOP 开发时，通常要保证一类操作具有相同的方法调用，此时就需要使用接口实现。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中结构体的使用-第2部分OOP</title>
    <link href="http://blog.hellokang.net/go/go-struct-ii/"/>
    <id>http://blog.hellokang.net/go/go-struct-ii/</id>
    <published>2018-10-31T08:39:28.000Z</published>
    <updated>2018-11-01T07:44:01.543Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-构造工厂函数&quot;&gt;2 构造工厂函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-成员方法接收器&quot;&gt;3 成员方法（接收器）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-继承内嵌结构体&quot;&gt;4 继承，内嵌结构体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-重写override&quot;&gt;5 重写，override&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;结构体的基本语法请参见：&lt;a href=&quot;http://www.hellokang.net/go/go-struct-i/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go语言中结构体的使用-第1部分结构体&lt;/a&gt;。&lt;br&gt;结构体除了是一个复合数据之外，还用来做面向对象编程。Go 语言使用结构体和结构体成员来描述真实世界的实体和实体对应的各种属性。也就意味着结构体类型可以类比为其他语言中的“类class”, 而结构体数据可以类比为其他语言中的 “对象”。&lt;br&gt;本文就说说结构体中，面向对象的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中结构体的使用-第1部分结构体</title>
    <link href="http://blog.hellokang.net/go/go-struct-i/"/>
    <id>http://blog.hellokang.net/go/go-struct-i/</id>
    <published>2018-10-31T04:08:38.000Z</published>
    <updated>2018-11-01T14:27:34.468Z</updated>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概述&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-定义语法&quot;&gt;2 定义语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-实例化&quot;&gt;3 实例化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-值类型&quot;&gt;4 值类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-初始化属性&quot;&gt;5 初始化属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-成员访问运算符点号&quot;&gt;6 &lt;code&gt;.&lt;/code&gt; 成员访问运算符点号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-匿名结构体&quot;&gt;7 匿名结构体&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;结构体是由成员构成的复合类型。Go 语言使用结构体和结构体成员来描述真实世界的实体和实体对应的各种属性。&lt;br&gt;结构体成员，也可称之为成员变量，字段，属性。属性要满足唯一性。&lt;br&gt;结构体的概念在软件工程上旧的术语叫 ADT（抽象数据类型：Abstract Data Type）&lt;br&gt;数据层面，结构体是自定义数据类型，可以理解成是由一系列具有相同或不同类型的数据构成的数据集合。因此结构体也被称之为抽象数据类型（ADT，Abstract Data Type）。&lt;br&gt;在Go语言中，结构体承担着面向对象语言中类的作用。&lt;/p&gt;
&lt;p&gt;Go语言中，结构体本身仅用来定义属性。还可以通过接收器函数来定义方法，使用内嵌结构体来定义继承。这样使用结构体相关操作Go语言就可以实现OOP面向对象编程了。&lt;/p&gt;
&lt;p&gt;我们先看结构体相关语法，再看OOP相关的。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中映射表map的使用</title>
    <link href="http://blog.hellokang.net/go/go-map/"/>
    <id>http://blog.hellokang.net/go/go-map/</id>
    <published>2018-10-30T10:29:57.000Z</published>
    <updated>2018-11-01T14:28:24.227Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;Go语言中的键值对(key-&amp;gt;value)集合，称之为映射map。映射map是变长类型，定义时不需要指定长度。映射map是无序的，遍历是的顺序不可期，原因是底层由hash表实现。&lt;br&gt;逻辑结构表示为：&lt;br&gt;&lt;img src=&quot;http://www.hellokang.net/images/posts/go/go-map.png&quot; alt=&quot;map示意&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.hellokang.net/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.hellokang.net/tags/go/"/>
    
      <category term="goGuide" scheme="http://blog.hellokang.net/tags/goGuide/"/>
    
  </entry>
  
</feed>
